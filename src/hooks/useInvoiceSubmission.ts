import { useMutation, useQueryClient } from '@tanstack/react-query';
import { supabase } from '@/integrations/supabase/client';
import { useAuth } from '@/contexts/AuthContext';
import { toast } from '@/hooks/use-toast';

interface WorkOrderAmount {
  work_order_id: string;
  amount: number;
}

interface InvoiceSubmissionData {
  external_invoice_number?: string;
  work_orders: WorkOrderAmount[];
  notes?: string;
}

export const useInvoiceSubmission = () => {
  const { user } = useAuth();
  const queryClient = useQueryClient();

  return useMutation({
    mutationFn: async (data: InvoiceSubmissionData) => {
      if (!user) throw new Error('User not authenticated');

      // Get user's organization
      const { data: profile } = await supabase
        .from('profiles')
        .select('id')
        .eq('user_id', user.id)
        .single();

      if (!profile) throw new Error('Profile not found');

      const { data: userOrg } = await supabase
        .from('user_organizations')
        .select('organization_id')
        .eq('user_id', profile.id)
        .single();

      if (!userOrg) throw new Error('User organization not found');

      // Calculate total amount
      const totalAmount = data.work_orders.reduce((sum, wo) => sum + wo.amount, 0);

      // Create invoice (internal_invoice_number will be auto-generated by trigger)
      const { data: invoice, error: invoiceError } = await supabase
        .from('invoices')
        .insert({
          external_invoice_number: data.external_invoice_number || null,
          total_amount: totalAmount,
          subcontractor_organization_id: userOrg.organization_id,
          submitted_by: profile.id,
          submitted_at: new Date().toISOString(),
          status: 'submitted',
          internal_invoice_number: '' // Will be overwritten by trigger
        })
        .select()
        .single();

      if (invoiceError) throw invoiceError;

      // Create multiple invoice work order junctions
      const junctionInserts = data.work_orders.map(wo => ({
        invoice_id: invoice.id,
        work_order_id: wo.work_order_id,
        amount: wo.amount,
        description: data.notes
      }));

      const { error: junctionError } = await supabase
        .from('invoice_work_orders')
        .insert(junctionInserts);

      if (junctionError) throw junctionError;

      return invoice;
    },
    onSuccess: (invoice) => {
      queryClient.invalidateQueries({ queryKey: ['subcontractor-work-orders'] });
      queryClient.invalidateQueries({ queryKey: ['invoices'] });
      
      toast({
        title: 'Invoice Submitted Successfully',
        description: `Internal #: ${invoice.internal_invoice_number}${
          invoice.external_invoice_number ? ` | Your #: ${invoice.external_invoice_number}` : ''
        }`,
      });
    },
    onError: (error) => {
      toast({
        title: 'Error submitting invoice',
        description: error.message,
        variant: 'destructive',
      });
    },
  });
};