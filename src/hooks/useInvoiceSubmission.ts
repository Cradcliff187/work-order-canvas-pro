import { useMutation, useQueryClient } from '@tanstack/react-query';
import { supabase } from '@/integrations/supabase/client';
import { useToast } from '@/hooks/use-toast';
import { useInvoiceFileUpload } from './useInvoiceFileUpload';

interface SubmitInvoiceData {
  externalInvoiceNumber?: string;
  totalAmount: number;
  workOrders: Array<{
    workOrderId: string;
    amount: number;
    description?: string;
  }>;
  attachments?: File[];
}

export const useInvoiceSubmission = () => {
  const queryClient = useQueryClient();
  const { toast } = useToast();
  const { uploadInvoiceAttachments } = useInvoiceFileUpload();

  const submitInvoice = useMutation({
    mutationFn: async (data: SubmitInvoiceData) => {
      // Get current user profile to get organization
      const { data: profile, error: profileError } = await supabase
        .from('profiles')
        .select('id')
        .single();

      if (profileError || !profile) throw new Error('User profile not found');

      // Get user's organization
      const { data: userOrg, error: userOrgError } = await supabase
        .from('user_organizations')
        .select('organization_id')
        .eq('user_id', profile.id)
        .single();

      if (userOrgError || !userOrg) throw new Error('User organization not found');

      // Create the invoice record (internal_invoice_number is auto-generated)
      const { data: invoice, error: invoiceError } = await supabase
        .from('invoices')
        .insert({
          external_invoice_number: data.externalInvoiceNumber || null,
          total_amount: data.totalAmount,
          submitted_at: new Date().toISOString(),
          status: 'submitted' as const,
          subcontractor_organization_id: userOrg.organization_id,
          submitted_by: profile.id,
          internal_invoice_number: '' // Will be auto-generated by trigger
        })
        .select('id, internal_invoice_number')
        .single();

      if (invoiceError) throw invoiceError;

      // Create invoice work order relationships
      const workOrderInserts = data.workOrders.map(wo => ({
        invoice_id: invoice.id,
        work_order_id: wo.workOrderId,
        amount: wo.amount,
        description: wo.description || null
      }));

      const { error: workOrderError } = await supabase
        .from('invoice_work_orders')
        .insert(workOrderInserts);

      if (workOrderError) throw workOrderError;

      // Upload attachments if provided
      if (data.attachments && data.attachments.length > 0) {
        try {
          await uploadInvoiceAttachments(data.attachments, invoice.id);
        } catch (uploadError) {
          console.warn('Failed to upload attachments:', uploadError);
          // Don't fail the entire operation for attachment issues
          // The invoice is already created and submitted
        }
      }


      return invoice;
    },
    onSuccess: (data) => {
      queryClient.invalidateQueries({ queryKey: ['invoices'] });
      toast({
        title: 'Invoice Submitted',
        description: `Invoice ${data.internal_invoice_number} has been submitted and admins have been notified.`,
      });
    },
    onError: (error) => {
      console.error('Error submitting invoice:', error);
      toast({
        title: 'Error',
        description: 'Failed to submit invoice. Please try again.',
        variant: 'destructive',
      });
    },
  });

  return {
    submitInvoice: submitInvoice.mutate,
    submitInvoiceAsync: submitInvoice.mutateAsync,
    isSubmitting: submitInvoice.isPending,
  };
};