
import { useEffect, useState } from 'react';
import { supabase } from '@/integrations/supabase/client';

interface UseWorkOrderNumberGenerationProps {
  organizationId?: string;
  locationNumber?: string;
}

interface UseWorkOrderNumberGenerationReturn {
  workOrderNumber: string;
  isLoading: boolean;
  error: string | null;
  isFallback: boolean;
  warning: string | null;
  requiresInitials: boolean;
  organizationName?: string;
  organizationInitials?: string;
  locationNumber?: string;
}

/**
 * Hook to generate work order numbers for organizations
 * 
 * Logic:
 * - If organization uses partner location codes, uses provided locationNumber
 * - If organization doesn't use partner location codes, generates auto location code
 * - Generates final work order number with format: {initials}-{locationCode}-{sequence}
 * 
 * @param organizationId - Organization ID (undefined = no generation)
 * @param locationNumber - Manual location code (for orgs that use partner location codes)
 * @returns Work order number generation data
 */
export function useWorkOrderNumberGeneration({
  organizationId,
  locationNumber,
}: UseWorkOrderNumberGenerationProps): UseWorkOrderNumberGenerationReturn {
  const [workOrderNumber, setWorkOrderNumber] = useState<string>('');
  const [isLoading, setIsLoading] = useState<boolean>(false);
  const [error, setError] = useState<string | null>(null);
  const [isFallback, setIsFallback] = useState<boolean>(false);
  const [warning, setWarning] = useState<string | null>(null);
  const [requiresInitials, setRequiresInitials] = useState<boolean>(false);
  const [organizationName, setOrganizationName] = useState<string | undefined>(undefined);
  const [organizationInitials, setOrganizationInitials] = useState<string | undefined>(undefined);
  const [generatedLocationNumber, setGeneratedLocationNumber] = useState<string | undefined>(undefined);

  useEffect(() => {
    const generateWorkOrderNumber = async () => {
      // Don't do anything if organizationId is not provided
      if (!organizationId) {
        setWorkOrderNumber('');
        setIsLoading(false);
        setError(null);
        setIsFallback(false);
        setWarning(null);
        setRequiresInitials(false);
        setOrganizationName(undefined);
        setOrganizationInitials(undefined);
        setGeneratedLocationNumber(undefined);
        return;
      }

      setIsLoading(true);
      setError(null);
      setIsFallback(false);
      setWarning(null);

      try {
        const { data: organization, error: orgError } = await supabase
          .from('organizations')
          .select('name, initials, uses_partner_location_numbers, next_sequence_number')
          .eq('id', organizationId)
          .single();

        if (orgError) {
          throw new Error(`Error fetching organization: ${orgError.message}`);
        }

        if (!organization) {
          throw new Error('Organization not found');
        }

        setOrganizationName(organization.name);
        setOrganizationInitials(organization.initials);

        let locationCode = locationNumber;
        let autoGeneratedLocationCode: string | undefined = undefined;

        if (!organization.uses_partner_location_numbers) {
          // Auto-generate location code using next_location_sequence
          const { data: nextLocationCode, error: nextLocationCodeError } = await supabase.rpc(
            'generate_next_location_number',
            { org_id: organizationId }
          );

          if (nextLocationCodeError) {
            throw new Error(`Error generating location number: ${nextLocationCodeError.message}`);
          }

          if (nextLocationCode === null) {
            throw new Error('Failed to generate next location code.');
          }

          autoGeneratedLocationCode = nextLocationCode;
          locationCode = autoGeneratedLocationCode;
          setGeneratedLocationNumber(autoGeneratedLocationCode);
        } else {
          setGeneratedLocationNumber(undefined);
        }

        if (!locationCode) {
          setWorkOrderNumber('');
          if (organization.uses_partner_location_numbers) {
            setWarning('Enter your location code to see the exact work order number that will be generated.');
          }
          return;
        }

        // Preview work order number without incrementing sequence
        const { data: generatedNumber, error: numberError } = await supabase.rpc(
          'preview_work_order_number_per_location',
          { 
            org_id: organizationId,
            location_code: locationCode
          }
        );

        if (numberError) {
          throw new Error(`Error generating work order number: ${numberError.message}`);
        }

        if (!generatedNumber) {
          throw new Error('Failed to generate work order number.');
        }

        setWorkOrderNumber(generatedNumber);

      } catch (e: any) {
        setError(e.message || 'An error occurred');
        console.error(e);
      } finally {
        setIsLoading(false);
      }
    };

    generateWorkOrderNumber();
  }, [organizationId, locationNumber]);

  return {
    workOrderNumber,
    isLoading,
    error,
    isFallback,
    warning,
    requiresInitials,
    organizationName,
    organizationInitials,
    locationNumber: generatedLocationNumber,
  };
}
